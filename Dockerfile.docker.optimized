FROM python:3.11-slim

# Set environment variables for optimization
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONHASHSEED=random
ENV STREAMLIT_SERVER_PORT=8501
ENV STREAMLIT_SERVER_ADDRESS=0.0.0.0
ENV STREAMLIT_SERVER_HEADLESS=true
ENV STREAMLIT_SERVER_ENABLE_CORS=false
ENV STREAMLIT_SERVER_ENABLE_XSRF_PROTECTION=false
ENV STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
ENV STREAMLIT_SERVER_MAX_UPLOAD_SIZE=200
ENV STREAMLIT_SERVER_MAX_MESSAGE_SIZE=200
ENV STREAMLIT_SERVER_ENABLE_STATIC_SERVING=true
ENV STREAMLIT_SERVER_ENABLE_WEBSOCKET_COMPRESSION=false

# Install system dependencies with optimization
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    curl \
    gnupg2 \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Install Microsoft ODBC Driver 18 with optimization
RUN curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > /usr/share/keyrings/microsoft-archive-keyring.gpg \
    && echo "deb [arch=amd64 signed-by=/usr/share/keyrings/microsoft-archive-keyring.gpg] https://packages.microsoft.com/debian/11/prod bullseye main" > /etc/apt/sources.list.d/microsoft-prod.list \
    && apt-get update \
    && ACCEPT_EULA=Y apt-get install -y msodbcsql18 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Create directories for persistent data
RUN mkdir -p /app/data /app/cache /app/logs /app/models

# Copy requirements first for better caching
COPY requirements.txt .
COPY requirements_verisk.txt .

# Install Python dependencies with optimization
RUN pip install --no-cache-dir --upgrade pip \
    && pip install --no-cache-dir -r requirements.txt \
    && pip install --no-cache-dir -r requirements_verisk.txt \
    && rm -rf ~/.cache/pip

# Pre-download and cache models with optimization
RUN python -c "\
import os; \
os.environ['TRANSFORMERS_CACHE'] = '/app/models'; \
os.environ['HF_HOME'] = '/app/models'; \
from sentence_transformers import SentenceTransformer; \
print('Pre-downloading embedding models...'); \
model = SentenceTransformer('all-MiniLM-L6-v2'); \
print('Embedding model cached successfully')"

# Copy application files
COPY . .

# Create necessary directories
RUN mkdir -p logs downloads models utils config

# Set permissions for data directories
RUN chmod 755 /app/data /app/cache /app/logs

# Expose port
EXPOSE 8501

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8501/_stcore/health || exit 1

# Start command with optimization
CMD ["streamlit", "run", "rag_fabric_app_docker.py", "--server.port=8501", "--server.address=0.0.0.0", "--server.headless=true"] 